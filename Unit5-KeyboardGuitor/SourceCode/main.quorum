use Libraries.Game.Game
use Libraries.Game.Graphics.Drawable
use Libraries.Sound.Audio
use Libraries.Game.Graphics.Color
use Libraries.Interface.Events.KeyboardEvent
use Libraries.Interface.Events.KeyboardListener
use Libraries.Game.Graphics.Label
use Libraries.Game.Graphics.Font
use Libraries.Sound.Speech

class Main is Game, KeyboardListener

    // Instatiating the Drawable objects for keys
    Drawable keyC
    Drawable keyCsharp
    Drawable keyD
    Drawable keyDsharp
    Drawable keyE
    Drawable keyF
    Drawable keyFsharp
    Drawable keyG
    Drawable keyGsharp
    Drawable keyA
    Drawable keyAsharp
    Drawable keyB
    Drawable keyC4
    Drawable keyC4sharp
    Drawable keyD4
    Drawable keyD4sharp
    Drawable keyE4
    Drawable keyF4

    // Instantiating the Drawable objects for background sceneries
    Drawable welcomeScreen
    Drawable concertHall
    Drawable thanksScreen

    // Instantiating the Font objects
    Font font1
    Font font2

    // Instatiating the Label objects
    Label welcomeLabel
    Label concertLabel
    Label thankULabel

    // Instatiating Speech object
    Speech speech

    // Instantiating the Audio objects for background sound effect
    Audio introAudio
    Audio concertBGM
    Audio cheerAudio

    // Instantiating the Audio objects for notes
    Audio noteC
    Audio noteCsharp
    Audio noteD
    Audio noteDsharp
    Audio noteE
    Audio noteF
    Audio noteFsharp
    Audio noteG
    Audio noteGsharp
    Audio noteA
    Audio noteAsharp
    Audio noteB
    Audio noteC4
    Audio noteC4sharp
    Audio noteD4
    Audio noteD4sharp
    Audio noteE4
    Audio noteF4
    

    // Instatiating the Color objects
    Color color
    Color red = color:Red()
    Color blue = color:Blue()
    Color yellow = color:Yellow()
    Color green = color:Green()
    Color orange = color:Orange()
    Color navy = color:Navy()
    Color purple = color:Purple()
    Color black = color:Black()
    Color white = color:White()

    /*  
    Declaring a growbal integer that controls the spinning movement of the 
    key mathematically when a key is pressed and released.
    */
    integer rotateC = 0
    integer rotateCsharp = 0
    integer rotateD = 0
    integer rotateDsharp = 0
    integer rotateE = 0
    integer rotateF = 0
    integer rotateFsharp = 0
    integer rotateG = 0
    integer rotateGsharp = 0
    integer rotateA = 0
    integer rotateAsharp = 0
    integer rotateB = 0
    integer rotateC4 = 0
    integer rotateC4sharp = 0
    integer rotateD4 = 0
    integer rotateD4sharp = 0
    integer rotateE4 = 0
    integer rotateF4 = 0
   

    action Main
        say "When the program starts, press 'space key to listen to the comments on each screen.'"
        StartGame()
    end

    action CreateGame

        // Loading background screen for each stage 
        welcomeScreen:LoadFilledRectangle(800, 600, black)
        Add(welcomeScreen)

        // Calling the actions to get the other screen ready for later use
        LoadConcertScreenForLaterUse()
        LoadThanksScreenForLaterUse()
    
        // Calling the actions for Setting the specific fonts to be used in the program
        SettingFonts(font1, "Arial", 48, red)
        SettingFonts(font2, "Arial", 36, orange)

        // Calling the action for Setting the labels
        text welcomeComment = "Welcome to the Keyboard Guitar! - While running this program, your keyboard becomes guitar tune player. Your home row keys are the main keyboard - like the white keys on a piano. Some of your upper-low keys are also turned into the half step keys - like the black keys on a piano. If you are ready to play, press ‘1’ to enter your concert hall! have fun jamming!"
        SetLabelsForEachScreen(welcomeLabel, font2, 700, welcomeComment, 30, 500)
        welcomeLabel:Show()

        text concertComment = "Press 'escape' to end the concert"
        SetLabelsForEachScreen(concertLabel, font1, 700, concertComment, 30, 100)
        concertLabel:Hide()

        text thanksComment = "Thank You!! Press 'escape' to end the program, press '1' to go back into the concert hall."
        SetLabelsForEachScreen(thankULabel, font1, 700, thanksComment, 50, 500)
        thankULabel:Hide()
        
        /* 
            Calling the action - you created in this file - to make it easy to Load 
            and Position the Drawable objects
        */
        LoadAndPosition(keyC, 40, 40, red, 60, 200)
        LoadAndPosition(keyD, 40, 40, blue, 60*2, 200)
        LoadAndPosition(keyE, 40, 40, yellow, 60*3, 200)
        LoadAndPosition(keyF, 40, 40, green, 60*4, 200)
        LoadAndPosition(keyG, 40, 40, orange, 60*5, 200)
        LoadAndPosition(keyA, 40, 40, navy, 60*6, 200)
        LoadAndPosition(keyB, 40, 40, purple, 60*7, 200)
        LoadAndPosition(keyC4, 40, 40, red, 60*8, 200)
        LoadAndPosition(keyD4, 40, 40, blue, 60*9, 200)
        LoadAndPosition(keyE4, 40, 40, yellow, 60*10, 200)
        LoadAndPosition(keyF4, 40, 40, green, 60*11, 200)

        // Loading and Positioning the half step keys bove the main keys 
        
        LoadAndPosition(keyCsharp, 40, 40, black, 90, 300)
        LoadAndPosition(keyDsharp, 40, 40, black, 90+60, 300)
        LoadAndPosition(keyFsharp, 40, 40, green, 90+60*3, 300)
        LoadAndPosition(keyGsharp, 40, 40, orange, 90+60*4, 300)
        LoadAndPosition(keyAsharp, 40, 40, navy, 90+60*5, 300)
        LoadAndPosition(keyC4sharp, 40, 40, purple, 90+60*7, 300)
        LoadAndPosition(keyD4sharp, 40, 40, red, 90+60*8, 300)

        HideGuitarKeys()

        // Loading the Audio files to the Audio objects to be played later
        introAudio:Load("media/code/intro-C.ogg")
        introAudio:EnableLooping()
        concertBGM:Load("media/code/break.ogg")
        cheerAudio:Load("media/code/StadiumCheer.ogg")

        // Letting the 'introAudio' to play at the start of the program
        introAudio:Play()
        
        // Callinc action for Loading the audio for each note
        LoadAllNoteSounds()
       
        AddKeyboardListener(me)
    end

    action Update(number seconds)
        /* 
        Calling the action 'Rotate()' - from Drawable class -  on each Drawable 
        object when the corresponding key is pressed' 
        */
        keyC:Rotate(360*seconds*rotateC)
        keyCsharp:Rotate(360*seconds*rotateCsharp)
        keyD:Rotate(360*seconds*rotateD)
        keyDsharp:Rotate(360*seconds*rotateDsharp)
        keyE:Rotate(360*seconds*rotateE)
        keyF:Rotate(360*seconds*rotateF)
        keyFsharp:Rotate(360*seconds*rotateFsharp)
        keyG:Rotate(360*seconds*rotateG)
        keyGsharp:Rotate(360*seconds*rotateGsharp)
        keyA:Rotate(360*seconds*rotateA)
        keyAsharp:Rotate(360*seconds*rotateAsharp)
        keyB:Rotate(360*seconds*rotateB)
        keyC4:Rotate(360*seconds*rotateC4)
        keyC4sharp:Rotate(360*seconds*rotateC4sharp)
        keyD4:Rotate(360*seconds*rotateD4)
        keyD4sharp:Rotate(360*seconds*rotateD4sharp)
        keyE4:Rotate(360*seconds*rotateE4)
        keyF4:Rotate(360*seconds*rotateF4)
    end

    // Creating the keyboard event when a specific key is pressed
    action PressedKey(KeyboardEvent event)
        if event:keyCode = event:NUM_1
            if welcomeScreen:IsShowing()
                CahngeIntroToConcert()
            elseif thanksScreen:IsShowing()
                ChangeThanksToConcert()
            end
        elseif event:keyCode = event:ESCAPE
            if concertHall:IsShowing()
                ChangeConcertToThanks()
            elseif thanksScreen:IsShowing()
                Exit()
            end
        elseif event:keyCode = event:SPACE
            if welcomeScreen:IsShowing()
                speech:Say(welcomeLabel:GetDescription())
            elseif concertHall:IsShowing()
                speech:Say(concertLabel:GetDescription())
            elseif thanksScreen:IsShowing()
                speech:Say(thankULabel:GetDescription())
            end
        elseif event:keyCode = event:A
            noteC:Play()
            rotateC = 1
        elseif event:keyCode = event:S
            noteD:Play()
            rotateD = 1
        elseif event:keyCode = event:D
            noteE:Play()
            rotateE = 1
        elseif event:keyCode = event:F
            noteF:Play()
            rotateF = 1
        elseif event:keyCode = event:G
            noteG:Play()
            rotateG = 1
        elseif event:keyCode = event:H
            noteA:Play()
            rotateA = 1
        elseif event:keyCode = event:J
            noteB:Play()
            rotateB = 1
        elseif event:keyCode = event:K
            noteC4:Play()
            rotateC4 = 1
        elseif event:keyCode = event:L
            noteD4:Play()
            rotateD4 = 1
        elseif event:keyCode = event:SEMICOLON
            noteE4:Play()
            rotateE4 = 1
        elseif event:keyCode = event:APOSTROPHE
            noteF4:Play()
            rotateF4 = 1
        elseif event:keyCode = event:W
            noteCsharp:Play()
            rotateCsharp = 1
        elseif event:keyCode = event:E
            noteDsharp:Play()
            rotateDsharp = 1
        elseif event:keyCode = event:T
            noteFsharp:Play()
            rotateFsharp = 1
        elseif event:keyCode = event:Y
            noteGsharp:Play()
            rotateGsharp = 1
        elseif event:keyCode = event:U
            noteAsharp:Play()
            rotateAsharp = 1
        elseif event:keyCode = event:O
            noteC4sharp:Play()
            rotateC4sharp = 1
        elseif event:keyCode = event:P
            noteD4sharp:Play()
            rotateD4sharp = 1
        end
    end

    // Creating the keyboard event when a specific key is released
    action ReleasedKey(KeyboardEvent event)
        if event:keyCode = event:A
            noteC:Stop()
            rotateC = 0
        elseif event:keyCode = event:S
            noteD:Stop()
            rotateD = 0
        elseif event:keyCode = event:D
            noteE:Stop()
            rotateE = 0
        elseif event:keyCode = event:F
            noteF:Stop()
            rotateF = 0
        elseif event:keyCode = event:G
            noteG:Stop()
            rotateG = 0
        elseif event:keyCode = event:H
            noteA:Stop()
            rotateA = 0
        elseif event:keyCode = event:J
            noteB:Stop()
            rotateB = 0
        elseif event:keyCode = event:K
            noteC4:Stop()
            rotateC4 = 0
        elseif event:keyCode = event:L
            noteD4:Stop()
            rotateD4 = 0
        elseif event:keyCode = event:SEMICOLON
            noteE4:Stop()
            rotateE4 = 0
        elseif event:keyCode = event:APOSTROPHE
            noteF4:Stop()
            rotateF4 = 0
        elseif event:keyCode = event:W
            noteCsharp:Stop()
            rotateCsharp = 0
        elseif event:keyCode = event:E
            noteDsharp:Stop()
            rotateDsharp = 0
        elseif event:keyCode = event:T
            noteFsharp:Stop()
            rotateFsharp = 0
        elseif event:keyCode = event:Y
            noteGsharp:Stop()
            rotateGsharp = 0
        elseif event:keyCode = event:U
            noteAsharp:Stop()
            rotateAsharp = 0
        elseif event:keyCode = event:O
            noteC4sharp:Stop()
            rotateC4sharp = 0
        elseif event:keyCode = event:P
            noteD4sharp:Stop()
            rotateD4sharp = 0
        end
    end 

// ************* Creating actions to manage complexity ************************

    // Creating the actions for loading the background screen for each phase of the program
    action LoadConcertScreenForLaterUse
        concertHall:Load("/media/code/concert scene1.jpg")
        Add(concertHall)
        concertHall:Hide()
    end

    action LoadThanksScreenForLaterUse
        thanksScreen:Load("media/code/concertThankU.jpg")
        Add(thanksScreen)
        thanksScreen:Hide()
    end

    // Creating actions for loading audio to the 'note' obejcts
    action LoadAllNoteSounds
        noteC:Load("media/code/Guitar-C.ogg")
        noteCsharp:Load("media/code/Guitar-C-sharp.ogg")
        noteD:Load("media/code/Guitar-D.ogg")
        noteDsharp:Load("media/code/Guitar-D-sharp.ogg")
        noteE:Load("media/code/Guitar-E.ogg")
        noteF:Load("media/code/Guitar-F.ogg")
        noteFsharp:Load("media/code/Guitar-F-sharp.ogg")
        noteG:Load("media/code/Guitar-G.ogg")
        noteGsharp:Load("media/code/Guitar-G-sharp.ogg")
        noteA:Load("media/code/Guitar-A.ogg")
        noteAsharp:Load("media/code/Guitar-A-sharp.ogg")
        noteB:Load("media/code/Guitar-B.ogg")
        noteC4:Load("media/code/Guitar-C4.ogg")
        noteC4sharp:Load("media/code/Guitar-C4-sharp.ogg")
        noteD4:Load("media/code/Guitar-D4.ogg")
        noteD4sharp:Load("media/code/Guitar-D4-sharp.ogg")
        noteE4:Load("media/code/Guitar-E4.ogg")
        noteF4:Load("media/code/Guitar-F4.ogg")
    end

    // Creating the action to set fonts
    action SettingFonts(Font font, text style, integer size, Color color)
        font:LoadFont(style)
        font:SetSize(size)
        font:SetColor(color)
    end

    // Creating the action to set labels
    action SetLabelsForEachScreen(Label label, Font font, integer labelWidth, text comments, number positionX, number positionY)
        label:SetFont(font)
        label:SetWidth(labelWidth)
        label:SetText(comments)
        label:SetDescription(comments)
        label:SetPosition(positionX, positionY)
        Add(label)
    end

    // action that helps the drawable objects to set its dimensions, postiion and color
    action LoadAndPosition(Drawable key, integer width, integer height, Color boxColor, number xPosition, number yPosition)
        key:LoadFilledRectangle(width, height, boxColor)
        key:SetPosition(xPosition, yPosition)
        Add(key)
    end

    action HideGuitarKeys()
        keyC:Hide()
        keyCsharp:Hide()
        keyD:Hide()
        keyDsharp:Hide()
        keyE:Hide()
        keyF:Hide()
        keyFsharp:Hide()
        keyG:Hide()
        keyGsharp:Hide()
        keyA:Hide()
        keyAsharp:Hide()
        keyB:Hide()
        keyC4:Hide()
        keyC4sharp:Hide()
        keyD4:Hide()
        keyD4sharp:Hide()
        keyE4:Hide()
        keyF4:Hide()
    end

    action ShowGuitarKeys()
        keyC:Show()
        keyCsharp:Show()
        keyD:Show()
        keyDsharp:Show()
        keyE:Show()
        keyF:Show()
        keyFsharp:Show()
        keyG:Show()
        keyGsharp:Show()
        keyA:Show()
        keyAsharp:Show()
        keyB:Show()
        keyC4:Show()
        keyC4sharp:Show()
        keyD4:Show()
        keyD4sharp:Show()
        keyE4:Show()
        keyF4:Show()
    end

    action CahngeIntroToConcert
        introAudio:Stop()
        welcomeScreen:Hide()
        welcomeLabel:Hide()
        concertHall:Show()
        concertLabel:Show()
        concertBGM:Play()
        ShowGuitarKeys()
    end

    action ChangeThanksToConcert
        cheerAudio:Stop()
        thanksScreen:Hide()
        thankULabel:Hide()
        concertHall:Show()
        concertLabel:Show()
        ShowGuitarKeys()
        concertBGM:Play()
    end

    action ChangeConcertToThanks
        concertBGM:Stop()
        concertHall:Hide()
        concertLabel:Hide()
        HideGuitarKeys()
        thanksScreen:Show()
        thankULabel:Show()
        cheerAudio:Play()
    end    
end